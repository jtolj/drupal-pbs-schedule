<?php

/**
 * Implements hook_menu()
 */
function pbs_schedule_grid_menu() {
  $items = array();
  /*
  $items['admin/config/system/pbs_schedule_grid'] = array(
    'title' => 'PBS Schedule Grid',
    'description' => 'Manage settings for the PBS Schedule Grid',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pbs_schedule_grid_admin_site_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pbs_schedule_grid'),
    'file' => 'pbs_schedule_grid.admin.inc',
  );
  */
  //PBS API Proxy callbacks
  $items['pbs-schedule-grid/daily/nojs/%'] = array(
    'page callback' => 'pbs_schedule_grid_get_day',
    'page arguments' => array(2,3,4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['pbs-schedule-grid/daily/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['pbs-schedule-grid/daily/nojs/%'];
  return $items;
}

/**
 * Implements hook_theme()
 */
function pbs_schedule_grid_theme() {
  return array(
    'pbs_schedule_grid' => array(
      'variables' => array(
        'is_ajax' => NULL,
        'start_time' => time() - (time() % 1800),
        'channels' => array(),
      ),
      'template' => 'pbs_schedule_grid',
      'path' => drupal_get_path('module', 'pbs_schedule_grid').'/templates',
    ),
    'pbs_schedule_grid_week' => array(
      'variables' => array(
        'is_ajax' => NULL,
        'start_time' => time() - (time() % 1800),
        'channel' => NULL,
      ),
      'template' => 'pbs_schedule_grid_week',
      'path' => drupal_get_path('module', 'pbs_schedule_grid').'/templates',
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 */
function pbs_schedule_grid_block_info() {
  $blocks['pbs_schedule_grid'] = array(
    'info' => t('PBS Schedule Grid'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['pbs_schedule_grid_week'] = array(
    'info' => t('PBS Schedule Weekly Grid'),
    'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 */
function pbs_schedule_grid_block_view($delta = '') {
  switch ($delta) {
    case 'pbs_schedule_grid':
      $content = _pbs_schedule_grid_build();
      $block['content'] = theme('pbs_schedule_grid', $content);
    break;
    case 'pbs_schedule_grid_week':
      $content = _pbs_schedule_grid_build_week();
      $block['content'] = theme('pbs_schedule_grid_week', $content);
    break;
  }
  return $block;
}


function _pbs_schedule_grid_build() {
  $date = (!empty($_GET['date']) && preg_match('/^(20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$/', $_GET['date'])) ? $_GET['date'] : date('Ymd');

  drupal_add_library('system', 'jquery.bbq');
  
  //Add ctools modal support
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
  ctools_add_js('pbs_schedule_ctools', 'pbs_schedule');

  //Add settings for our modal theme using inline, so that
  //we can provide an expression for pseudo-reponsive modals
  drupal_add_js("Drupal.settings.pbsScheduleModal = {
    modalSize: {
      type: 'scale',
      width: (jQuery(window).width() < 700) ? .8 : .5,
      height: (jQuery(window).width() < 700) ? .8 : .4,
      addHeight: 20,
      addWidth: 5,
    },
    modalOptions: {
      opacity: 0.4,
      background: '#000',
    },
    closeText: '',
    animation: 'fadeIn',
    modalTheme: 'pbs_schedule_modal',
    }
    ", 'inline');
    
  //Add jQuery Scrollpane Javascript
  drupal_add_css(drupal_get_path('module', 'pbs_schedule_grid') . '/css/jquery.jscrollpane.css');
  ctools_add_js('jquery.jscrollpane.min','pbs_schedule_grid');
  
  //Event handlers,etc for schedule grid
  ctools_add_js('pbs-schedule-grid', 'pbs_schedule_grid');
  
  $content = pbs_schedule_grid_get_day(FALSE, $date);
  return $content;
}


/**
 * Return data for weekly grid
 *
 */
function _pbs_schedule_grid_build_week() {
  ctools_add_js('pbs-schedule-grid-weekly', 'pbs_schedule_grid');
  
  //Add ctools modal support
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
  ctools_add_js('pbs_schedule_ctools', 'pbs_schedule');

  //Add settings for our modal theme using inline, so that
  //we can provide an expression for pseudo-reponsive modals
  drupal_add_js("Drupal.settings.pbsScheduleModal = {
    modalSize: {
      type: 'scale',
      width: (jQuery(window).width() < 700) ? .8 : .5,
      height: (jQuery(window).width() < 700) ? .8 : .4,
      addHeight: 20,
      addWidth: 5,
    },
    modalOptions: {
      opacity: 0.4,
      background: '#000',
    },
    closeText: '',
    animation: 'fadeIn',
    modalTheme: 'pbs_schedule_modal',
    }
    ", 'inline');
  
  //if starting Sunday is provided, use that, otherwise start with previous Sunday
  $dates[] = strtotime('last Sunday');
  for ($i=0;$i<6;$i++) {
    $dates[] = strtotime('+1 day', $dates[$i]);
  }
  
  //Fetch schedule for each day of the week
  foreach ($dates as $date) {
    $content['listings'][] = pbs_schedule_grid_get_day(FALSE,  date('Ymd', $date));
    $content['dates'][] = $date;
  }
  
  return $content;
 
}

/**
 *
 */
function pbs_schedule_grid_get_day($ajax, $date) {
  $config = pbs_schedule_get_config();
  $enabled_channels = $config['channels'];
  $is_ajax = $ajax === 'ajax';
  $schedule = pbs_schedule_request($config['api_key'], $config['callsign'], 'day', array($date));
  
  if (!empty($schedule)) {
    foreach ($schedule->feeds as $feed) {
      if (in_array($feed->short_name, $enabled_channels, TRUE)) {
        $listings = array();
        $i = 0;
        $len = sizeof($feed->listings);
        foreach ($feed->listings as $listing) {
          $i++;
          //Accomodate a program that starts prior to 12am the previous day and spills into this day
          if ($i === 1 && $listing->start_time !== '0000') {
            $hours_mins = str_split($listing->start_time,2);
            if ($hours_mins[1] > 9) {//Don't bother unless pushing back 10 minutes or more
              //This is a lot of work to get one show - is it worth it?
              $yesterday_listing = NULL;
              $yesterday = (date('Ymd', strtotime($date . ' - 1 day')));
              $yesterday_schedule = pbs_schedule_request($config['api_key'], $config['callsign'], 'day', array($yesterday));
              foreach ($yesterday_schedule->feeds as $yesterday_feed) {
                if ($feed->short_name === $yesterday_feed->short_name) {
                  $yesterday_listing = end($yesterday_feed->listings);
                  break;
                }
              }
              
              $fill = $hours_mins[0] * 60 + $hours_mins[1];
              $override = array(
                'title' => $yesterday_listing->title . ' (Cont\'d)',
                'duration' => $fill,
                'width' => 130 * ($fill/30) + ($fill/30 -1) * 20,
              );
              
              $listings['0000'] = pbs_schedule_grid_item_data($yesterday_listing, $override);
            }
          }
          
          //Build our listings data for the template
          $listings[$listing->start_time] = pbs_schedule_grid_item_data($listing);
          
          //If this is our last item. Truncate duration if it overruns this day
          if ($i === $len) {
            $listings[$listing->start_time]['last'] = TRUE;
            if ($listing->start_time + $listing->minutes > 2360) {
              $listings[$listing->start_time]['title'] = $listings[$listing->start_time]['title'] . ' (Continues)';
              $interval = date_diff(new DateTime($listing->start_time), new DateTime(2400));
              $mod_duration = ($interval->format('%h') * 60) + $interval->format('%i');
              $listings[$listing->start_time]['width'] = 130 * (round($mod_duration/5)*5/30) + (round($mod_duration/5)*5/30 -1) * 20;
            }
          }
        }
        $content['channels'][] = array(
          'name' => t($feed->full_name),
          'listings' => $listings
        );
      }
    }
  }
  if ($is_ajax) {
    return json_encode($content);
  }
  return $content;
}

/**
 * Extract the variables from an API listing object for our template
 * 
 * @param object $listing A schedule listing item object
 * @param array $override An array of items that will override the parameters from the listing object
 * @return array An array of extracted listing data to be injected into the template
 */
function pbs_schedule_grid_item_data($listing, $override = array()) {
  $vars = array(
    'title' => $listing->title,
    'episode_title' => (empty($listing->episode_title)) ? null : $listing->episode_title,
    'show_id' => (empty($listing->show_id)) ? null : $listing->show_id,
    'link' => (empty($listing->show_id)) ? null : 'pbs-schedule/showlookup/nojs/' . $listing->show_id,
    'duration' => $listing->minutes,
    'width' => 130 * (round($listing->minutes/5)*5/30) + (round($listing->minutes/5)*5/30 -1) * 20, //Round to nearest 5 minutes
  );
  return array_replace($vars, $override);
}
